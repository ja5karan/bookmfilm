{"version":3,"sources":["components/socket/socket.service.js"],"names":["angular","module","factory","socketFactory","ioSocket","io","path","socket","syncUpdates","modelName","array","cb","noop","on","item","oldItem","_","find","_id","index","indexOf","event","splice","push","remove","unsyncUpdates","removeAllListeners"],"mappings":"AAAA;AACA;;AAEAA,QAAQC,MAAR,CAAe,eAAf,EACGC,OADH,CACW,QADX,EACqB,UAASC,aAAT,EAAwB;AACzC;AACA,MAAIC,WAAWC,GAAG,EAAH,EAAO;AACpB;AACA;AACAC,UAAM;AAHc,GAAP,CAAf;;AAMA,MAAIC,SAASJ,cAAc;AACzBC;AADyB,GAAd,CAAb;;AAIA,SAAO;AACLG,kBADK;;AAGL;;;;;;;;;;AAUAC,eAbK,uBAaOC,SAbP,EAakBC,KAblB,EAayBC,EAbzB,EAa6B;AAChCA,WAAKA,MAAMX,QAAQY,IAAnB;;AAEA;;;AAGAL,aAAOM,EAAP,CAAUJ,YAAY,OAAtB,EAA+B,UAASK,IAAT,EAAe;AAC5C,YAAIC,UAAUC,EAAEC,IAAF,CAAOP,KAAP,EAAc;AAC1BQ,eAAKJ,KAAKI;AADgB,SAAd,CAAd;AAGA,YAAIC,QAAQT,MAAMU,OAAN,CAAcL,OAAd,CAAZ;AACA,YAAIM,QAAQ,SAAZ;;AAEA;AACA;AACA,YAAIN,OAAJ,EAAa;AACXL,gBAAMY,MAAN,CAAaH,KAAb,EAAoB,CAApB,EAAuBL,IAAvB;AACAO,kBAAQ,SAAR;AACD,SAHD,MAGO;AACLX,gBAAMa,IAAN,CAAWT,IAAX;AACD;;AAEDH,WAAGU,KAAH,EAAUP,IAAV,EAAgBJ,KAAhB;AACD,OAjBD;;AAmBA;;;AAGAH,aAAOM,EAAP,CAAUJ,YAAY,SAAtB,EAAiC,UAASK,IAAT,EAAe;AAC9C,YAAIO,QAAQ,SAAZ;AACAL,UAAEQ,MAAF,CAASd,KAAT,EAAgB;AACdQ,eAAKJ,KAAKI;AADI,SAAhB;AAGAP,WAAGU,KAAH,EAAUP,IAAV,EAAgBJ,KAAhB;AACD,OAND;AAOD,KAhDI;;;AAkDL;;;;;AAKAe,iBAvDK,yBAuDShB,SAvDT,EAuDoB;AACvBF,aAAOmB,kBAAP,CAA0BjB,YAAY,OAAtC;AACAF,aAAOmB,kBAAP,CAA0BjB,YAAY,SAAtC;AACD;AA1DI,GAAP;AA4DD,CAzEH","file":"socket.service.js","sourcesContent":["/* global io */\n'use strict';\n\nangular.module('yoTemplateApp')\n  .factory('socket', function(socketFactory) {\n    // socket.io now auto-configures its connection when we ommit a connection url\n    var ioSocket = io('', {\n      // Send auth token on connection, you will need to DI the Auth service above\n      // 'query': 'token=' + Auth.getToken()\n      path: '/socket.io-client'\n    });\n\n    var socket = socketFactory({\n      ioSocket\n    });\n\n    return {\n      socket,\n\n      /**\n       * Register listeners to sync an array with updates on a model\n       *\n       * Takes the array we want to sync, the model name that socket updates are sent from,\n       * and an optional callback function after new items are updated.\n       *\n       * @param {String} modelName\n       * @param {Array} array\n       * @param {Function} cb\n       */\n      syncUpdates(modelName, array, cb) {\n        cb = cb || angular.noop;\n\n        /**\n         * Syncs item creation/updates on 'model:save'\n         */\n        socket.on(modelName + ':save', function(item) {\n          var oldItem = _.find(array, {\n            _id: item._id\n          });\n          var index = array.indexOf(oldItem);\n          var event = 'created';\n\n          // replace oldItem if it exists\n          // otherwise just add item to the collection\n          if (oldItem) {\n            array.splice(index, 1, item);\n            event = 'updated';\n          } else {\n            array.push(item);\n          }\n\n          cb(event, item, array);\n        });\n\n        /**\n         * Syncs removed items on 'model:remove'\n         */\n        socket.on(modelName + ':remove', function(item) {\n          var event = 'deleted';\n          _.remove(array, {\n            _id: item._id\n          });\n          cb(event, item, array);\n        });\n      },\n\n      /**\n       * Removes listeners for a models updates on the socket\n       *\n       * @param modelName\n       */\n      unsyncUpdates(modelName) {\n        socket.removeAllListeners(modelName + ':save');\n        socket.removeAllListeners(modelName + ':remove');\n      }\n    };\n  });\n"]}